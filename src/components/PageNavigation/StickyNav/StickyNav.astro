---
import Container from "@components/Container.astro";
import { Icon } from "astro-icon/components";
import "./nav.css";
import CustomImage from "@components/CustomImage.astro";
import { translateNavItem } from '@utils/translations';
interface Props {
    blackText: boolean;
    fixedMenu: boolean;
    data: {
        links: [string];
        logo: {
            [key: string]: string;
        };
        title: string;
    };
    country: string;
}

const {
    data: { links, logo, title},
    fixedMenu,
    blackText,
    country
} = Astro.props;

const pageLinks = links.map((link) =>
    link === "home"
        ? { name: translateNavItem("home", country), href: "/" }
        : { 
            name: translateNavItem(link, country), 
            href: `#${link.split(" ").join("-")}` 
          }
);
---

<nav
    class="sticky-nav"
    data-nav-bar
    data-nav
    data-is-active="false"
    data-fixed-menu={fixedMenu}
    data-black-text={blackText}
>
    <Container>
        <div class="sticky-nav__wrapper">
            <a class="sticky-nav__logo" href="/" aria-label={title.trim()}>
                <CustomImage
                    eager={true}
                    image={logo}
                    classlist="sticky-nav__logo-image"
                    size="small"
                />
                <!-- <span class="sticky-nav__logo-text">{title}</span> -->
            </a>
            <menu class="sticky-nav__menu" data-menu data-is-active="false">
                {
                    pageLinks.map((link, index) => (
                        <li>
                            <a
                                title={link.href}
                                href={link.href}
                                class={
                                    index === pageLinks?.length - 1
                                        ? "sticky-nav__link sticky-nav__link--cta"
                                        : "sticky-nav__link"
                                }
                            >
                                <div />
                                <span>{link.name}</span>
                            </a>
                        </li>
                    ))
                }
            </menu>
            <div class="sticky-nav__actions">
                <button
                    type="button"
                    id="sticky_nav__toggle"
                    class="sticky_nav__toggle btn btn-primary btn-icon"
                    data-menu-toggle
                    data-is-active="false"
                    aria-label="toggle navigation"
                    aria-expanded="false"
                >
                    <Icon
                        name="mdi:menu"
                        aria-hidden="true"
                        focusable="false"
                        data-toggle-icon
                        data-is-active="true"
                    />
                    <Icon
                        name="mdi:close"
                        aria-hidden="true"
                        focusable="false"
                        data-toggle-icon
                        data-is-active="false"
                    />
                </button>
            </div>
        </div>
    </Container>
</nav>

<script is:inline>
    const toggleActive = (el) => {
        el.dataset.isActive = String(!(el.dataset.isActive === "true"));
    };

    const toggleScroll = (el) => {
        if (window.scrollY > el.getBoundingClientRect().height * 0.5) {
            el.dataset.isActive = "true";
        } else {
            el.dataset.isActive = "false";
        }
    };

    const toggleAria = (el) => {
        el.ariaExpanded = String(!(el.ariaExpanded === "true"));
    };

    document.addEventListener("DOMContentLoaded", () => {
        const nav = document.querySelector("[data-nav-bar]");
        const toggle = document.querySelector(
            "[data-menu-toggle]",
        );
        const toggleIcons = document.querySelectorAll(
            "[data-icon]",
        )
        const menu = document.querySelector("[data-menu]");

        // Click Listener
        toggle.addEventListener("click", function () {
            toggleActive(menu); // Toggle Menu
            toggleAria(this); // Toggle Aria
            toggleActive(this); // Toggle Active

            for (const icon of toggleIcons) {
                toggleActive(icon); // Toggle Icons
            }
        });

        toggleScroll(nav);

        // Scroll Listener
        document.addEventListener("scroll", () => {
            if (window.scrollY > nav.getBoundingClientRect().height * 0.5) {
                toggleScroll(nav);
            } else {
                toggleScroll(nav);
            }
        });
    });
</script>
